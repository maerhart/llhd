name: Build and Test

on: [push, pull_request]

jobs:
  lint:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
    - name: Get LLHD
      uses: actions/checkout@v2
    - name: clang-format
      uses: DoozyX/clang-format-lint-action@v0.5
      with:
        source: '.'
        extensions: 'h,cpp'
        clangFormatVersion: 9

  build:
    name: Build and Test
    runs-on: ubuntu-latest  
    steps:
    - name: Configure Environment
      run: echo "::add-path::$GITHUB_WORKSPACE/llvm/install/bin"
    - name: Get LLHD
      uses: actions/checkout@v2
      with:
        path: 'llhd'
    - name: Cache LLVM
      id: cache-llvm
      uses: actions/cache@v1
      with:
        path: llvm
        key: ${{ runner.os }}-llvm-install-4
    - name: Get LLVM
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: 'llvm/llvm-project'
        ref: 'e71dd7c011a35b6969b53c168a0e57afa1a57792'
        path: 'llvm'
    - name: Install LLVM
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: mkdir llvm/build && mkdir llvm/install && cd llvm/build && cmake $GITHUB_WORKSPACE/llvm/llvm -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/llvm/install -DLLVM_ENABLE_PROJECTS='mlir' -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_INSTALL_UTILS=ON -DCMAKE_LINKER=/usr/bin/lld -DLLVM_PARALLEL_LINK_JOBS=2 -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON && cmake --build . --target install
    - name: Configure cmake
      run: mkdir llhd/build && cd llhd/build && cmake $GITHUB_WORKSPACE/llhd -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_LINKER=/usr/bin/lld -DMLIR_DIR=$GITHUB_WORKSPACE/llvm/install/lib/cmake/mlir/ -DLLVM_DIR=$GITHUB_WORKSPACE/llvm/install/lib/cmake/llvm/ -DLLVM_EXTERNAL_LIT=$GITHUB_WORKSPACE/llvm/build/bin/llvm-lit
    - name: Build and Test LLHD
      run: cd llhd/build && cmake --build . --target check-llhdc
  
  docgen:
    name: Generate Docs
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Cache LLVM
      id: cache-llvm
      uses: actions/cache@v1
      with:
        path: llvm
        key: ${{ runner.os }}-llvm-install-4
    - name: Get LLHD
      if: steps.cache-llvm.outputs.cache-hit == 'true'
      uses: actions/checkout@v2
      with:
        path: 'llhd'
    - name: Get doc repo
      if: steps.cache-llvm.outputs.cache-hit == 'true'
      uses: actions/checkout@v2
      with:
        repository: rodonisi/llhd-docs
        token: ${{ secrets.PAT }}
        path: 'llhd-docs'
    - name: Generate documentation
      if: steps.cache-llvm.outputs.cache-hit == 'true'
      run: |
        mkdir llhd/build  
        cd llhd/build
        cmake $GITHUB_WORKSPACE/llhd -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_LINKER=/usr/bin/lld -DMLIR_DIR=$GITHUB_WORKSPACE/llvm/install/lib/cmake/mlir/ -DLLVM_DIR=$GITHUB_WORKSPACE/llvm/install/lib/cmake/llvm/ -DLLVM_EXTERNAL_LIT=$GITHUB_WORKSPACE/llvm/build/bin/llvm-lit
        cmake --build . --target mlir-doc
    - name: Add doc to target repo
      if: steps.cache-llvm.outputs.cache-hit == 'true'
      run: |
        cat llhd-docs/assets/templates/opdoc_frontmatter > llhd-docs/docs/LLHDOps.md
        cat llhd/build/docs/Dialect/llhd.md >> llhd-docs/docs/LLHDOps.md
        cat llhd-docs/assets/templates/convdoc_frontmatter > llhd-docs/docs/passes/LLHDToLLVM.md
        cat llhd/build/docs/Passes/LLHDToLLVM.md >> llhd-docs/docs/passes/LLHDToLLVM.md
    - name: Commit and push to target repo
      if: steps.cache-llvm.outputs.cache-hit == 'true'
      run: | 
        cd llhd-docs
        git config --local user.name "GitHub Push Action"
        git config --local user.mail "action@generate_docs.com"
        git add docs/LLHDOps.md docs/passes/LLHDToLLVM.md
        git commit -m "push docs" || echo "No changes to commit"
        git push
